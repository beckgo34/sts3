DB 관련 설정 -> root-context.xml
1) DataSource (DB)
	- 드라이버 클래스
	- DB까지의 경로(url)
	- DB 계정 이름
	- DB 계정 비밀번호
2) SqlSessionFactory (MyBatis)
	MyBatis를 위한 클래스(인터페이스) scanning 
3) Transaction 관련 

Java packege
1) sesrvice - Service 클래스를 작성
2) dao - DAO 인터페이스를 작
3) dto - DTO 클래스를 작성
4) util - 기타 도구 관련 클래스(paging 처리)


Spring Framework의 components
	spring이 관리하는 대상 객체. 
	IoC로 처리하는 DI의 대상.
	
	component는 어노테이션으로 처리.
	1) @COmponent - 컨트롤러와 서비스를 제외한 대상 객체
	2) @Comtroller - 제어용 객체
	3) @Service - 기능 처리용 객체

Job(잡) - 요청 처리 프로세스
Veiw <-> Controller <-> Service <-> Dao <-> DB 

Mabatis config xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
	
</configuration>

Mybatis mapper xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="">

</mapper>


Class와 interface
	메소드 = 선언부 + 정의부 -> 클래스 => 인스턴스 생성 후 사용
	메소드 선언부 -> 인터페이스 => 인스턴스 생성이 불가
	
	추상화(abstract) - 개념을 정의한다
	
DAO를 사용하는 클래스는 Service 클래스.
MyBatis로 처리되는 인스턴스는 스프링 프레임위크에 등록된다.
(즉, 컴포넌트와 같다. -> DI를 자동으로 처리)

@AutoWired 어노테이션
컴포넌트 인스턴스를 자동으로 주입 또는 수거하도록 지정하는 어노테이션.

페이징 처리(페이지네이션. Pagination) 처리
	전체 콘텐츠를 페이지 단위로 나누어 페이지 번호를 부여하거나,
	'이전', '다음' 버튼으로 이동하는 방식
	MySQL의 limit를 활용.
	
	전체 페이지 개수 = 전체 콘텐츠 / 페이지당 보여질 콘텐츠 개수
		이 때, 나머지가 0이 아닐 경우 1페이지 추가
		
	페이지 번호(번튼)은 <a>태그를 활용.
	
StringBuffer 객체
	문자열 처리를 위한 공간을 제공하는 객체.
	문자열을 붙이거나 자르거나 등의 수정이 많은 경우 활용하는 객체.	
	
Session
	클라이언트가 서버에 접속하게 되면 각 클라이언트 별로 할당되는 공간.
	(일종의 클라이언트와 서버 간의 통로를 나타내는 말인데.. 
	 메모리를 사용하기 때문에 공간이라고 표한합니다.)

	인터넷의 통신 메커니즘 : Best Effort 방식.
		3way handshaking 방식
		요청 -> 응답 -> 서버 응답 -> 클라이언트  데이터 전송 -> 서버 응답 
	로그인 상황을 유지하지 않는다!
	로그인 상황을 유지하기 위한 로그인 성공 정보를 어딘가에 저장해서 사용.
	1) 성공 정보를 클라이언트에서 저장하는 - 쿠키(cookie)
	2) 성공 정보를 서버에서 저장 - session
	
MyBatis 표현식
	SQL 퀴리문을 실행하는 객체 - Statement 객체
	MyBatis는 PreperedStatement 객체
	
	JDBC 프로그래밍
	1. 드라이버 로딩
	2. Connection 수립(프로그램<-> DB)
	3. SQL 문 실행 결과 처리
		Statement 는 쿼리 실행 객체
		ResultSet은 select 결과 저장 객체
	4. Connection 해제
	
Mabatis 운영 방식
	미완성 된 쿼리문에 데이터를 주입하는 방식.

	MyBatis 표현식
	1) #{식별자} 
		식별자 - Dao 메도스에서 작성한 매개변수, 
				Map의 key, Dto의 멤버변수.
		쿼리문에서 사용하는 값(데이터).
		문자열일 경우 자동으로 데이터 앞뒤에 '를 붙임.
		숫자일 경우 그대로 입력.		
	2) ${식별자}
		쿼리문에서 사용하는 컬럼명, 테이블명에서 사용
		문자열, 숫자 상관없이 그대로 입력.
		예를 들어, 검색 기능을 구현할 때 
		- 제목 검색 쿼리
		SELECT * FROM mlist
		WHERE m_name like ('%', '범죄', '%');
		- 감독 검색 쿼리
		SELECT * FROM mlist
		WHERE m_director like concat('%', '스티븐', '%';)
		
		-> mybatis map
		SELECT * FROM mlist
		WHERE ${colmn_name} like concat('%', #{keyword}, '%');

form을 통한 데이터 전송
	Multipart 데이터 = 텍스트 + 파일(2진데이터)

	form 태그에 반드시 enctype을 작성. 속성값은 "multipart/form-data".

	파일 업로드 용 라이브러리(dependency) - Maven repository에서.
	1) commons-io
	2) commons-fileuplad
















































