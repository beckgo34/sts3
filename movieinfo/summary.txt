DB 관련 설정 -> root-context.xml
1) DataSource (DB)
	- 드라이버 클래스
	- DB까지의 경로(url)
	- DB 계정 이름
	- DB 계정 비밀번호
2) SqlSessionFactory (MyBatis)
	MyBatis를 위한 클래스(인터페이스) scanning 
3) Transaction 관련 

Java packege
1) sesrvice - Service 클래스를 작성
2) dao - DAO 인터페이스를 작
3) dto - DTO 클래스를 작성
4) util - 기타 도구 관련 클래스(paging 처리)


Spring Framework의 components
	spring이 관리하는 대상 객체. 
	IoC로 처리하는 DI의 대상.
	
	component는 어노테이션으로 처리.
	1) @COmponent - 컨트롤러와 서비스를 제외한 대상 객체
	2) @Comtroller - 제어용 객체
	3) @Service - 기능 처리용 객체

Job(잡) - 요청 처리 프로세스
Veiw <-> Controller <-> Service <-> Dao <-> DB 

Mabatis config xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
	
</configuration>

Mybatis mapper xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="">

</mapper>


Class와 interface
	메소드 = 선언부 + 정의부 -> 클래스 => 인스턴스 생성 후 사용
	메소드 선언부 -> 인터페이스 => 인스턴스 생성이 불가
	
	추상화(abstract) - 개념을 정의한다
	
DAO를 사용하는 클래스는 Service 클래스.
MyBatis로 처리되는 인스턴스는 스프링 프레임위크에 등록된다.
(즉, 컴포넌트와 같다. -> DI를 자동으로 처리)

@AutoWired 어노테이션
컴포넌트 인스턴스를 자동으로 주입 또는 수거하도록 지정하는 어노테이션.

페이징 처리(페이지네이션. Pagination) 처리
	전체 콘텐츠를 페이지 단위로 나누어 페이지 번호를 부여하거나,
	'이전', '다음' 버튼으로 이동하는 방식
	MySQL의 limit를 활용.
	
	전체 페이지 개수 = 전체 콘텐츠 / 페이지당 보여질 콘텐츠 개수
		이 때, 나머지가 0이 아닐 경우 1페이지 추가
	

























